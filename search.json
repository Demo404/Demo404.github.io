[{"title":"MySQL学习 ｜ 一、MySQL的基本概念和安装","url":"/2023/07/26/MySQL%E5%AD%A6%E4%B9%A0%20%EF%BD%9C%20%E4%B8%80%E3%80%81MySQL%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%92%8C%E5%AE%89%E8%A3%85/","content":"一、数据库相关的概念数据库（DB）：存储数据的仓库，数据是有组织的进行存储。\n数据库管理系统（DBMS）：操作和管理数据库的大型软件。‍‍‍‍‍‍‍\nSQL：操作关系型数据库的编程语言，定义了一套操作关系型数据库的统一标准。  \n​\t\t  \n二、主流的数据库管理系统1、Oracle：oracle公司研发，大型且收费。\n2、MySQL：小型，有免费有收费。‍\n3、PostgreSQL：中小型数据库，免费。\n4、SQLite：嵌入性数据库，安卓系统采用SQLite。\n. . . . . .‍‍‍\n​\t\t\n三、MySQL的安装和启动‍‍‍版本：\n社区版（MySQL Community Server）\n免费，MySQL不提供任何技术支持。\n\n商业版（MySQL Enterprise Edition）‍‍\n收费，可试用，MySQL提供技术支持。\n\n\n下载地址：https://dev.mysql.com/downloads/ 或者 https://www.mysql.com/ 依次如下点击进行下载。\n\n下拉页面找到download\n\n下载 MySQL Community Server 版（根据自身情况选择）\n\n然后选择对应的版本下载\n\n最后一步可以不用登录和注册。\n\n安装步骤：1、上传下载的安装包到服务器的 &#x2F;usr&#x2F;local 目录下‍\n2、使用 tar 命令解压下载的安装包‍\n tar -xvf mysql-8.0.33-linux-glibc2.12-x86_64.tar.xz参数说明：-x：解压缩压缩档案的参数-v：压缩的过程中显示档案-f：置顶文档名，在f后面立即接文件名，不能再加参数\n\n3、重命名解压后的文件夹\nmv mysql-8.0.33-linux-glibc2.12-x86_64 mysql\n\n4、修改MySQL的配置文件如下\nvim /etc/my.cnf\n# For advice on how to change settings please see# http://dev.mysql.com/doc/refman/5.7/en/server-configuration-defaults.html[mysqld]skip-name-resolvecharacter_set_server=utf8init_connect=&#x27;SET NAMES utf8&#x27;## Remove leading # and set to the amount of RAM for the most important data# cache in MySQL. Start at 70% of total RAM for dedicated server, else 10%.# innodb_buffer_pool_size = 128M## Remove leading # to turn on a very important data integrity option: logging# changes to the binary log between backups.# log_bin## Remove leading # to set options mainly useful for reporting servers.# The server defaults are faster for transactions and fast SELECTs.# Adjust sizes as needed, experiment to find the optimal values.# join_buffer_size = 128M# sort_buffer_size = 2M# read_rnd_buffer_size = 2Mdatadir=/var/lib/mysqlsocket=/var/lib/mysql/mysql.sock# Disabling symbolic-links is recommended to prevent assorted security riskssymbolic-links=0log-error=/var/log/mysqld.logpid-file=/var/run/mysqld/mysqld.pid#最大连接数max_connections=1000\n 然后 :wq 退出编辑。‍‍‍‍‍‍‍\n5、新建用户和用户组‍\ncd /usr/local/mysql/groupadd mysql               # 创建用户组useradd -r -g mysql mysql    # 创建用户并且指定用户组chown -R mysql:mysql ./      # 修改当前文件的归属用户和用户组\n\n6、初始化数据库，分别执行如下命令\ncd /usr/local/mysql/mkdir ./data./bin/mysqld --user=mysql --basedir=/usr/local/mysql/ --datadir=/usr/local/mysql/data/ --initialize\n\n第三步命令如果报错：‍‍‍‍.&#x2F;bin&#x2F;mysqld: error while loading shared libraries: libaio.so.1: cannot open shared object file: No such file or directory 的话说明当前缺少了libaio.so.1库，执行如下命令安装libaio.so.1库。\nyum install -y libaio\n\n安装成功后再次执行第三条命令，出现如下界面则说明安装成功了，最后的初始化密码要记住。\n\n7、添加MySQL到系统服务中并且建立软连接‍\ncp -a ./support-files/mysql.server /etc/init.d/mysqlchmod +x /etc/init.d/mysqlchkconfig --add mysqlchkconfig --list mysql #检查是否生效\n\n\n建立软连接\nln -s /usr/local/mysql/bin/mysql /usr/bin\n\n8、启动并且登录MySQL\n执行 service mysql start 命令，出现 Success字样则说明启动成功。 \n\n登录MySQL‍\nmysql -u root -p\n\n\n回车然后输入刚才的初始化密码，输入时光标并不会有任何变化。  \n修改用户密码\nALTER USER &quot;root&quot;@&quot;localhost&quot; IDENTIFIED  BY &quot;你的新密码&quot;;FLUSH PRIVILEGES;  #配置生效\n\n\n修改如下配置，使得root用户可以远程连接。‍‍\nuse mysql;  update user set host=&#x27;%&#x27; where user =&#x27;root&#x27;;FLUSH PRIVILEGES;    #配置生效\n\n​\t\t\n四、MySQL的数据模型关系型数据库（RDBMS）概念：建立在关系型模型基础上，由多张相互连接的二维表组成的数据库。\n特点：&emsp;&emsp; - 1、使用表结构存储。格式统一便于维护。&emsp;&emsp; - 2、使用SQL语言操作，标准统一使用方便。\n\n"},{"title":"MySQL学习 ｜ 七、SQL语言中的约束","url":"/2023/08/01/MySQL%E5%AD%A6%E4%B9%A0%20%EF%BD%9C%20%E4%B8%83%E3%80%81SQL%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E7%BA%A6%E6%9D%9F/","content":"1、概念  \n约束是作用于表中字段上的规则，用于限制存储在表中的数据。‍\n2、目的‍\n保证数据库中数据的正确性、有效性和完整性。‍‍‍‍\n3、分类‍\n\n\n\n约束\n描述\n关键字\n\n\n\n非空约束\n限制该字段的数据不能为null\nNOT　NULL\n\n\n唯一约束\n保证该字段所有的值都是唯一不重复的\nUNIQUE\n\n\n主键约束\n主键是一行数据的唯一标识，要求非空且唯一\nPRIMARY KEY\n\n\n默认约束\n保存数据时如果未指定该字段的值则使用默认约束\nDEFAULT\n\n\n检查约束（8.0.16版本之后）\n保证字段值满足某一个条件\nCHECK\n\n\n外键约束\n用来将两张表的数据之间建立连接，保证数据的一致性和完整性\nFOREIGN KEY\n\n\n4、外键约束\n创建外键\nALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY(外键字段名) REFERENCES 主表(主表列名);\n\n删除外键  \nALTER TABLE 表名 DROP FOREIGN KEY 外键名称;\n\n\n\n5、外键的删除&#x2F;更新行为\n\n\n\n行为\n说明\n\n\n\nNO ACTION\n当在父表中更新&#x2F;删除记录时，首先检查该记录是否有对应外键，如果有则不允许删除&#x2F;更新。（与RESTRICT一致）\n\n\nRESTRICT\n当在父表中更新&#x2F;删除记录时，首先检查该记录是否有对应外键，如果有则不允许删除&#x2F;更新。（与NO ACTION一致）\n\n\nCASCADE\n当在父表中更新&#x2F;删除记录时，首先检查该记录是否有对应外键，如果有删除&#x2F;更新外键在子表中的记录。（与NO ACTION一致）\n\n\nSET NULL\n当在父表中删除记录时，首先检查该记录是否有对应外键，如果有则将子表中该外键的值置为null。\n\n\nSET　DEFAULT\n父表有变更时，字表将外键列设置为一个默认值。（InnoDB引擎不支持）\n\n\n语法：\nALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY(外键字段名) REFERENCES 主表(主表列名) ON UPDATE CASCADE ON DELETE CASCADE;"},{"title":"MySQL学习 ｜ 三、SQL语言中DML语句的语法","url":"/2023/07/28/MySQL%E5%AD%A6%E4%B9%A0%20%EF%BD%9C%20%E4%B8%89%E3%80%81SQL%E8%AF%AD%E8%A8%80%E4%B8%ADDML%E8%AF%AD%E5%8F%A5%E7%9A%84%E8%AF%AD%E6%B3%95/","content":"DML：数据操作语言，用来对数据库表中的数据进行增删改操作。\n\n\n添加语句（INSERT）\n给指定字段添加数据：\nINSERT INTO 表名(字段1, 字段2) VALUES(值1, 值2);\n\n给所有的字段添加数据：‍‍‍‍\nINSERT INTO 表名 VALUES(值1, 值2 ... 值n);\n\n批量添加数据：\nINSERT INTO 表名(字段1, 字段2) VALUES(值1, 值2), (值1, 值2)(值1, 值2);\nINSERT INTO 表名 VALUES(值1, 值2 ... 值n), (值1, 值2 ... 值n), (值1, 值2 ... 值n);\n\n添加语句注意的事项：  \n&emsp;&emsp;&emsp;&emsp;1、插入数据时，指定的字段顺序要和值的顺序一一对应。\n&emsp;&emsp;&emsp;&emsp;2、字符串和日期类型应该包裹在引号中。‍‍\n&emsp;&emsp;&emsp;&emsp;3、输入的数据大小应该在字段规定范围内。\n\n\n修改语句（UPDATE）\n修改表中的数据:\nUPDATE 表名 SET 字段1=值1, 字段2=值2 [WHERE 条件];\n\n修改语句的条件没有时会更新整个表的数据。\n\n\n删除语句（DELETE）  \n删除表中的数据:\nDELETE FROM 表名 [WHERE 条件];\n\n删除语句的条件没有时会删除整个表的数据。\n"},{"title":"MySQL学习 ｜ 二、SQL分类以及DDL语句的语法","url":"/2023/07/28/MySQL%E5%AD%A6%E4%B9%A0%20%EF%BD%9C%20%E4%BA%8C%E3%80%81SQL%E5%88%86%E7%B1%BB%E4%BB%A5%E5%8F%8ADDL%E8%AF%AD%E5%8F%A5%E7%9A%84%E8%AF%AD%E6%B3%95/","content":"一、SQL的分类‍DDL（Date Definiition Lanhuage）：数据定义语言，用来定义数据库对象（数据库、表、字段等）。 create table 表名;\nDML（Data Manipulation Language）：数据操作语言，用来对数据库中的数据进行增删改查。 alter table 表名 add 字段名 类型(长度);\nDQL（Data Query Language）：数据查询语言，用来查询数据库中表里面的数据。\nselect * from 表名;\n\nDCL（Data Control Language）：数据控住语言，用来创建用户，控制用户对数据库的访问权限。‍\ngrant all privileges on *.* to &#x27;XXX&#x27;@&#x27;%&#x27; identified by &#x27;XXX&#x27; with grant option;\n\n\n\n二、DDL在数据库上的操作查询所有数据库: \nSHOW DATABASES;\n查询当前数据库：  \nSHOW DATABASE();\n 创建数据库：  \nCREATE DATABASE [IF NOT EXISTS] 库名 [DEFAULT CHARSET utf8mb4];\n 删除数据库：‍‍‍‍‍‍‍‍\nDROP DATABASE [IF NOT EXISTS] 库名;\n 使用数据库：\nUSE 库名;\n\n\n\n三、DDL在表上操作查询当前数据库中的所有表：\nSHOW TABLES;\n查询表结构（不会展示字段注释）：  \nDESC 表名;\n查询表的创建语句：\nSHOW CREATE TABLE 表名;\n 创建表：  \ncreate table 表名(    字段1 字段1类型 [comment 字段1注释],    字段2 字段2类型 [comment 字段2注释],    字段3 字段3类型 [comment 字段3注释],    ......    字段n 字段n类型 [comment 字段n注释])[comment 表注释];\n 添加字段：\nALTER TABLE 表名 ADD 字段名 类型(长度);\n 修改字段的数据类型：\nALTER TABLE 表名 MODIFY 字段名 字段类型(长度);\n修改字段的名称和类型：‍‍\nALTER TABLE 表名 CHANGE 旧字段名 新字段名 字段类型(长度);\n 删除字段：\nALTER TABLE 表名 DROP 字段名;\n 修改表名称：\nALTER TABLE 表名 RENAME TO 新表名;\n删除表：‍‍‍‍\nDROP TABLE [IF EXISTS] 表名;TRUNCATE TABLE 表名;\n\nDROP：物理删除表结构加数据。‍‍‍‍TRUNCATE：物理删除表结构加数据后 重新创建表。\n\n\n四、DDL语句中的数据类型1、数值类型  \n\n\n\n类型\n大小\n描述\n\n\n\nTINYINT\n1 bytes\n小整数值\n\n\nSMALLINT\n2 bytes\n大整数值\n\n\nMEDIUMINT\n3 bytes\n大整数值\n\n\nINT 或者 INTEGER\n4 bytes\n大整数值\n\n\nBIGINT\n8 bytes\n极大整数值\n\n\nFLOAT\n4 bytes\n单精度浮点整数\n\n\nDOUBLE\n8 bytes\n双精度浮点整数\n\n\nDECIMAL\n\n小数[精确定点数，依赖于M（精度）和D（标度）]\n\n\n2、字符串类型‍‍‍‍‍‍\n\n\n\n类型\n大小\n描述\n\n\n\nCHAR\n0 - 255 bytes\n定长字符串\n\n\nVARCHAR\n0 - 65536 bytes\n变长字符串\n\n\nTINYBLOG\n0 - 255 bytes\n不超过255个字符的二进制数据\n\n\nTINYTEXT\n0 - 255 bytes\n短文本字符串\n\n\nBLOG\n0 - 65536 bytes\n二进制形式的长文本数据\n\n\nTEXT\n0 - 65536 bytes\n长文本数据\n\n\nMEDIUMBLOG\n0 - 16777215 bytes\n二进制形式的中等长度文本数据\n\n\nMEDIUMTEXT\n0 - 16777215 bytes\n中等长度文本数据\n\n\nLONGBLOG\n0 - 4294967295 bytes\n二进制形式的极大文本数据\n\n\nLONGTEXT\n0 - 4294967295 bytes\n极大文本数据\n\n\n&emsp;&emsp; char(10): 即使存储一个字符，剩下的使用空格占位，效率高。&emsp;&emsp; varchar(10): 存储一个字符，实际占用一个字符，效率低一点。   \n3、日期时间类型\n\n\n\n类型\n大小\n范围\n格式\n描述\n\n\n\nDATE\n3\n1000-01-01 至 9999-12-31\nYYYY-MM-DD\n日期值\n\n\nTIME\n3\n-838:59:59 至 838:59:59\nHH:MM:SS\n时间值或持续时间\n\n\nYEAR\n1\n1901 至 2155\nYYYY\n年份值\n\n\nDATETIME\n8\n1000-01-01 00:00:00 至 9999-12-31 23:59:59\nYYYY-MM-DD HH:MM:SS\n混合日期和时间值\n\n\nTIMESTAMP\n4\n1970-01-01 00:00:01 至 2038-01-19 03:14:07\nYYYY-MM-DD HH:MM:SS\n混合日期和时间值，时间戳\n\n\n","tags":["数据库"]},{"title":"MySQL学习 ｜ 五、SQL语言中DCL语句的语法","url":"/2023/07/28/MySQL%E5%AD%A6%E4%B9%A0%20%EF%BD%9C%20%E4%BA%94%E3%80%81SQL%E8%AF%AD%E8%A8%80%E4%B8%ADDCL%E8%AF%AD%E5%8F%A5%E7%9A%84%E8%AF%AD%E6%B3%95/","content":"DCL：数据控制语言，用来管理数据库用户、数据库访问权限。\n一、DCL管理用户创建用户\nCRAETE USER &#x27;用户名&#x27;@&#x27;主机&#x27; IDENTIFIED BY &#x27;密码&#x27;;\n\n主机:  localhost:当前主机；%:任意机器。‍‍‍‍‍‍\n查询用户\nSELECT * FROM USER;\n\n修改用户密码  \nALTER USER &#x27;用户名&#x27;@&#x27;主机&#x27; IDENTIFIED WITH mysql_native_password &#x27;密码&#x27;;\n\n删除用户  \nDROP USER &#x27;用户名&#x27;@&#x27;主机&#x27;;\n\n  \n\n二、DCL权限控制‍‍mysql中常用的权限列表‍‍‍‍‍‍‍\n\n\n\n权限\n说明\n\n\n\nALL, ALL PRIVILEGES\n所有权限\n\n\nSELECT\n查询数据\n\n\nINSERT\n插入数据\n\n\nUPDATE\n修改数据\n\n\nDELETE\n删除数据\n\n\nALTER\n修改表\n\n\nDROP\n删除数据库&#x2F;表&#x2F;视图\n\n\nCREATE\n创建数据库&#x2F;表\n\n\n查询权限\nSHOW GRANTS FOR &#x27;用户名&#x27;@&#x27;主机&#x27;;\n\n授予权限  \nGRANT 权限列表 ON 数据库.表名 TO &#x27;用户名&#x27;@&#x27;主机&#x27;;\n\n撤销权限  \nREVOKE 权限列表 ON 数据库.表名 FROM &#x27;用户名&#x27;@&#x27;主机&#x27;;\n\n‍‍‍\n"},{"title":"MySQL学习 ｜ 六、SQL语言中函数","url":"/2023/08/01/MySQL%E5%AD%A6%E4%B9%A0%20%EF%BD%9C%20%E5%85%AD%E3%80%81SQL%E8%AF%AD%E8%A8%80%E4%B8%AD%E5%87%BD%E6%95%B0/","content":"函数：是指一段可以直接被另一段程序调用的程序或代码。\n一、字符串函数\n\n\n函数\n功能\n\n\n\nCONCAT(S1, S2, …, Sn)\n字符串拼接，将字符串S1，S2…Sn拼接成一个新字符串\n\n\nLOWER(str)\n将字符串str全部转为小写\n\n\nUPPER(str)\n将字符串str全部转为大写\n\n\nLPAD(str, n, pad)\n左填充，用字符串pad对str的左边进行填充，达到n个字段的长度\n\n\nRPAD(str, n, pad)\n右填充，用字符串pad对str的右边进行填充，达到n个字段的长度\n\n\nTRIM(str)\n去掉字符串头部和尾部的空格\n\n\nSUBSTRING(str, start, len)\n返回字符串str从start开始起的len个长度的字符串\n\n\n1、CONCAT函数\nSELECT CONCAT(&#x27;hello&#x27;, &#x27;mysql&#x27;);输出：hello mysql\n\n2、LOWER函数‍‍\nSELECT LOWER(&#x27;HELLO&#x27;);输出：hello\n\n3、UPPER函数\nSELECT UPPER(&#x27;hello&#x27;);输出：HELLO\n\n4、LPAD函数  \nSELECT LPAD(&#x27;01&#x27;, 5, &#x27;-&#x27;);输出：---01\n\n5、RPAD函数\nSELECT RPAD(&#x27;01&#x27;, 5, &#x27;-&#x27;);输出：01---\n\n6、TRIM函数（只能去除两端的空格，不能去除中间的空格）\nSELECT TRIM(&#x27; Hello Trim &#x27;);输出：Hello Trim\n\n7、SUBSTRING\nSELECT SUBSTRING(&#x27;Hello MySQL&#x27;, 1, 5);输出：Hello\n\n  \n\n二、数值函数‍‍\n\n\n函数\n功能\n\n\n\nCEIL(x)\n向上取整\n\n\nFLOOR(x)\n向下取整\n\n\nMOD(x, y)\n返回x&#x2F;y的模\n\n\nRAND()\n返回0～1内的随机数\n\n\nROUND(x, y)\n求参数x的四舍五入的值，保留y位小数\n\n\n1、CEIL函数\nSELECT CEIL(1.6);    输出：1SELECT CEIL(1.1);    输出：1\n\n2、FLOOR函数\nSELECT FLOOR(1.6);    输出：2SELECT FLOOR(1.1);   输出：2\n\n3、MOD函数(求余数)  \nSELECT MOD(3, 4);   输出：3SELECT MOD(6, 4);    输出：2\n\n4、RAND  \nSELECT RAND();       输出：0～1之间的随机数\n\n5、ROUND‍\nSELECT ROUND(2.34, 2);     输出：2.34SELECT ROUND(1.236, 2);    输出：1.24\n\n  \n\n三、日期函数‍‍‍‍\n\n\n函数\n功能\n\n\n\nCURDATE()\n返回当前日期\n\n\nCURTIME()\n返回当前时间\n\n\nNOW()\n返回当前日期和时间\n\n\nYEAR(date)\n返回执行date的年份\n\n\nMONTH(date)\n返回指定date的月份\n\n\nDAY(date)\n返回指定date的日期\n\n\nDATE_ADD(date, INTERVAL expr type)\n返回一个日期&#x2F;时间加上一个时间间隔expr后的时间值\n\n\nDATEDIFF(date1, date2)\n返回起始时间date1和结束时间date2之间的天数\n\n\n1、CURDATE\nSELECT CURDATE();    输出：2023-07-13\n\n2、CURTIME\nSELECT CURTIME();    输出：08:37:26\n\n3、NOW\nSELECT NOW();        输出：2023-07-13 08:38:33\n\n4、YEAR、MONTH、DAY\nSELECT YEAR(NOW());      输出：2023SELECT YEAR(MONTH());    输出：7SELECT YEAR(DAY());      输出：13\n\n5、DATE_ADD\nSELECT DATE_ADD(NOW(), INTERVAL 70 DAY);输出：2023-09-21 08:40:13SELECT DATE_ADD(NOW(), INTERVAL -10 MONTH);输出：2022-09-13 08:40:13\n\n6、DATEDIFF(第一个时间减第二个时间)\nSELECT DATEDIFF(&#x27;2023-07-10&#x27;, &#x27;2023-07-01&#x27;);输出：9\n\n  \n\n四、流程控制函数‍‍\n\n\n函数\n功能\n\n\n\nIF(value, t, f)\n如果value为true则返回t，否则返回f。\n\n\nIFNULL(val1, val2)\n如果val1不为空则返回val1，否则返回val2。\n\n\nCASE WHEN [val1] THEN [res1] … ELSE [default] END\n如果val1为true则返回res1…否则返回默认值default。\n\n\nCASE [expr] WHEN [val1] THEN [res1] … ELSE [default] END\n如果表达式expr的值为val1则返回res1…否则返回默认值default。\n\n\n1、IF\nSELECT IF(true, &#x27;OK&#x27;, &#x27;Error&#x27;);    输出：OK\n\n2、IFNULL‍\nSELECT IFNULL(&#x27;OK&#x27;, &#x27;Default&#x27;);    输出：OKSELECT IFNULL(&#x27;&#x27;, &#x27;Default&#x27;);      输出：SELECT IFNULL(NULL, &#x27;Default&#x27;);    输出：Default\n\n3、CASE WHEN THEN ELSE END\n查询员工姓名和城市，如果城市是上海和北京返回一线城市，其他返回二线城市SELECT \tname, \tCASE work_address WHEN &#x27;上海&#x27; THEN &#x27;一线&#x27; WHEN &#x27;北京&#x27; THEN &#x27;一线&#x27; ELSE &#x27;二线&#x27; END FROM worker;"},{"title":"MySQL学习 ｜ 四、SQL语言中DQL语句的语法","url":"/2023/07/28/MySQL%E5%AD%A6%E4%B9%A0%20%EF%BD%9C%20%E5%9B%9B%E3%80%81SQL%E8%AF%AD%E8%A8%80%E4%B8%ADDQL%E8%AF%AD%E5%8F%A5%E7%9A%84%E8%AF%AD%E6%B3%95/","content":"DQL：数据查询语言，用来查询数据库中表里面的数据。\nDQL语法‍‍‍\nSELECT 字段列表 FROM 表名 WHERE 条件 GROUP BY 分组 HAVING 分组后的条件列表 ORDER BY 排序字段列表 LIMIT 分页参数;\n\n数据查询语言的分类：\n&emsp;&emsp;&emsp;&emsp;基本查询‍‍\n&emsp;&emsp;&emsp;&emsp;条件查询（WHERE）\n&emsp;&emsp;&emsp;&emsp;聚合查询（COUNT、MAX、MIN、AVG、SUM）\n&emsp;&emsp;&emsp;&emsp;分组查询（GROUP BY）‍‍‍‍‍\n&emsp;&emsp;&emsp;&emsp;排序查询（ORDER BY）\n&emsp;&emsp;&emsp;&emsp;分页查询（LIMIT）\n\n\n一、DQL的基础查询1、查询返回多个字段\nSELECT 字段1, 字段2, 字段n FROM 表名;SELECT * FROM 表名;\n\nselect * 可读性以及效率偏低，推荐 select 字段 的方式。\n2、设置别名\nSELECT 字段1 AS [别名1], 字段2 AS [别名2], ... 字段n AS [别名n] FROM 表名;\n\n3、去除重复记录\nSELECT DISTINCT 字段名 FROM 表名；\n\n\n\n二、DQL语句的条件查询‍‍\n\n\n比较运算符\n功能\n\n\n\n&gt;, &gt;&#x3D;\n大于，大于等于\n\n\n&lt;, &lt;&#x3D;\n小于，小于等于\n\n\n&#x3D;\n等于\n\n\n&lt;&gt;, !&#x3D;\n不等于\n\n\nBETWEEN…AND…\n在某个范围内（含最大值和最小值）\n\n\nIN(…)\n在IN之后的列表中\n\n\nLIKE 占位符\n模糊匹配\n\n\nIS NULL\n是NULL\n\n\n\n\n\n\n\n逻辑运算符\n功能\n\n\n\nAND 或 &amp;&amp;\n并且（多个条件同时成立）\n\n\nOR 或 ||\n或者（多个条件满足一个）\n\n\nNOT 或 ！\n非，不是\n\n\n1、查询年龄小于18的员工\nSELECT * FROM 表名 WHERE age &lt; 18;\n\n2、查询年龄等于20的员工‍\nSELECT * FROM 表名 WHERE age = 20;\n\n2、查询年龄不等于20的员工\nSELECT * FROM 表名 WHERE age != 20;SELECT * FROM 表名 WHERE age &lt;&gt; 20;\n\n3、查询没有年龄的员工信息  \nSELECT * FROM 表名 WHERE age is null;\n\n4、查询有年龄的员工信息  \nSELECT * FROM 表名 WHERE age is not null;\n\n6、查询年龄在20到30的员工信息\nSELECT * FROM 表名 WHERE age between 20 and 30;SELECT * FROM 表名 WHERE age &gt;= 20 and and &lt;= 30;\n\n7、查询年龄为20且性别为女的员工信息‍\nSELECT * FROM 表名 WHERE age = 20 and sex = &#x27;女&#x27;;\n\n8、查询年龄为20或者30或者40的员工信息\nSELECT * FROM 表名 WHERE age = 20 or age = 30 or age = 40;SELECT * FROM 表名 WHERE age in (20, 30, 40);\n\n9、查询姓名为两个字的员工(一个下划线代表一个字符)\nSELECT * FROM 表名 WHERE name like &#x27;__&#x27;;\n\n10、查询身份证号最后一位是X的员工信息‍‍‍‍\nSELECT * FROM 表名 WHERE id_card like &#x27;%X&#x27;;\n\n  \n\n三、DQL语句的聚合函数‍‍‍‍‍‍聚合函数作用：将一列数据作为一个整体进行纵向计算。\n注意：所有的null值不进行聚合函数计算。\n1、统计员工数量\nSELECT count(*) FROM 表名;SELECT count(字段名) FROM 表名;\n\n2、统计平均值\nSELECT avg(字段名) FROM 表名;\n\n3、查询最大值  \nSELECT max(字段名) FROM 表名;\n\n4、查询最小值‍\nSELECT min(字段名) FROM 表名;\n\n5、查询某个字段的和\nSELECT sum(字段名)  FROM 表名;\n\n  \n\n四、DQL语句的分组查询‍‍‍‍语法：SELECT 字段列表 FROM 表名 [WHERE 条件] GROUP BY [HAVING 分组后的过滤条件]‍‍‍‍‍\n注意：\n&emsp;&emsp;&emsp;&emsp;1、分组查询的顺序为where -&gt; 聚合函数 -&gt; having‍‍‍‍‍‍‍‍‍‍‍‍\n&emsp;&emsp;&emsp;&emsp;2、分组之后查询的字段一般为聚合函数和分组字段，查询其他字段无意义。\n&emsp;&emsp;&emsp;&emsp;1、根据性别分组，查询男女员工的数量\nSELECT count(*) FROM 表名 GROUP BY gender;\n\n2、根据性别分组，查询男女员工的平均年龄  \nSELECT avg(age) FROM 表名 GROUP BY gender;\n\n3、查询年龄小于45的员工并且根据工作地址分组，获取员工数量大于3的工作地址\nSELECT count(*) as address_count FROM 表名 WHERE age &lt; 45 GROUP BY work_address HAVING address_count &gt;= 3;\n\n五、DQL语句的排序查询SQL语句中支持多个字段排序，排序方式有两种：ASC代表升序(默认值)，DESC代表降序。‍‍\n1、根据年龄对员工进行升序排列\nSELECT 字段名 FROM 表名 ORDER BY age ASC;\n\n2、根据入职时间进行降序排列  \nSELECT 字段名 FROM 表名 ORDER BY entry_date DESC;\n\n3、根据年龄对员工进行升序排序，年龄相同根据入职时间将序排列‍‍\nSELECT 字段名 FROM 表名 ORDER BY age ASC, entry_date DESC;\n\n  \n\n六、DQL语句的分页查询语法：SELECT 字段名 FROM 表名 LIMIT 起始索引,查询记录数;\n注意：LIMIT为MySQL的方言，不同数据库分页有不同的实现。‍‍\n1、查询第一页的员工数据，每页展示10条\nSELECT * FROM LIMIT 0,10;\n\n2、查询第二页的员工数据，每页展示10条  \nSELECT * FROM LIMIT 10,10;\n\n  \n\n七、DQL语句的执行顺序‍‍‍‍FROM -&gt; WHERE -&gt; GROUP BY -&gt; SELECT -&gt; ORDER BY -&gt; LIMIT\n"}]